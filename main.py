#{DEBUT : Importation des modules 
from itertools import cycle
from discord.ui import View, Button, Modal, TextInput, Select
from discord.ext import commands, tasks
from motors import config, memory
from io import BytesIO
from groq import Groq
import discord, json, os, asyncio, time, random, sys

#FIN}

#{DEBUT : Creation de la fonction du cycle satus
status = cycle(config.cycle) 
@tasks.loop(seconds=5)
async def status_swap(): 
    await bot.change_presence(activity=discord.CustomActivity(next(status)))
#FIN}

#{DEBUT : Configuration des clients
intents = discord.Intents.default()
intents.message_content = True
intents.members = True  # Active l'intention pour les membres
bot = commands.Bot(command_prefix=config.prefix, intents=intents)
client = Groq(api_key=config.api_key) # Client pour l'API Groq
#FIN}

#{DEBUT : Creation de la fonction de verification des fichiers de niveaux
data_folder = "datacenter" #D√©finir le chemin du dossier et du fichier
levels_file = os.path.join(data_folder, "levels.json")
# V√©rifier si le dossier existe, sinon le cr√©er
if not os.path.exists(data_folder):
    os.makedirs(data_folder)

# V√©rifier si le fichier levels.json existe, sinon le cr√©er
if not os.path.exists(levels_file):
    with open(levels_file, "w") as f:
        json.dump({}, f)
#FIN}

#{DEBUT : Creation de la fonction de verification des fichiers Json des fils
thread_counters_file = os.path.join(data_folder, "thread_counters.json") # D√©finir le chemin du fichier de compteurs de fils

# V√©rifier si le fichier thread_counters.json existe, sinon le cr√©er
if not os.path.exists(thread_counters_file):
    with open(thread_counters_file, "w") as f:
        json.dump({}, f)
#FIN}

#{DEBUT : Creation de la fonction de verification des fichiers Json de sanction
sanctions_file = os.path.join(data_folder, "sanctions.json") # D√©finir le chemin du fichier de suivi des sanctions

# V√©rifier si le fichier sanctions.json existe, sinon le cr√©er
if not os.path.exists(sanctions_file):
    with open(sanctions_file, "w") as f:
        json.dump({}, f)
#FIN}

#{DEBUT : Creation de la fonction de verification des fichiers Json pour le voc
# D√©finir le chemin du fichier de suivi des vocaux
voice_activity_file = os.path.join(data_folder, "voice_activity.json")

# V√©rifier si le fichier voice_activity.json existe, sinon le cr√©er
if not os.path.exists(voice_activity_file):
    with open(voice_activity_file, "w") as f:
        json.dump({}, f)
#FIN}

#{DEBUT : Creation de la fonction de verification des fichiers Json pour les cmd no code !
custom_commands_file = os.path.join(data_folder, "custom_commands.json") # D√©finir le chemin du fichier de commandes personnalis√©es

# V√©rifier si le fichier custom_commands.json existe, sinon le cr√©er
if not os.path.exists(custom_commands_file):
    with open(custom_commands_file, "w") as f:
        json.dump({}, f)
#FIN}

#{DEBUT : Creation de la fonction de verification des fichiers Json pour les confessions
confession_counter_file = os.path.join(data_folder, "confession_counter.json") # D√©finir le chemin du fichier de compteur de confessions

# V√©rifier si le fichier confession_counter.json existe, sinon le cr√©er
if not os.path.exists(confession_counter_file):
    with open(confession_counter_file, "w") as f:
        json.dump({"last_confession_number": 0}, f)
#FIN}

#{DEBUT : Creation de la fonct de verification des fichiers d'anniversaire
birthdays_file = os.path.join(data_folder, "birthdays.json") # D√©finir le chemin du fichier pour stocker les anniversaires

# V√©rifier si le fichier birthdays.json existe, sinon le cr√©er
if not os.path.exists(birthdays_file):
    with open(birthdays_file, "w") as f:
        json.dump({}, f)
#FIN}

#{DEBUT : Ajoutez une t√¢che asynchrone pour envoyer des rappels dans le salon de bump √† intervalles r√©guliers
class BumpReminderView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="Bumper le serveur", style=discord.ButtonStyle.grey, emoji="<a:sadgers:1243293297363910827>")
    async def bump_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message(
            "Merci de vouloir bumper le serveur ! Utilisez la commande `/bump` dans ce salon [Clique Ici!](https://ptb.discord.com/channels/1166812114648838184/1167201714957467760).",
            ephemeral=True
        )

@tasks.loop(seconds=config.bump_reminder_interval)
async def bump_reminder():
    """
    Envoie un rappel pour bump le serveur √† intervalles r√©guliers.
    """
    main_channel = bot.get_channel(config.main_channel_id)
    if main_channel:
        # Cr√©er un embed pour le rappel
        embed = discord.Embed(
            title="<:chibiusawelcome:1310852415150620703> Rappel de Bump",
            description="```Aidez le serveur √† grandir en utilisant la commande `/bump` !\n"
                        "Cliquez sur le bouton ci-dessous pour plus de d√©tails.```",
            color=discord.Color.from_rgb(255, 255, 255)  # Couleur blanche
        )
        embed.set_footer(text="Merci pour votre soutien ‚ù§Ô∏è")
        embed.set_thumbnail(url=bot.user.avatar.url if bot.user.avatar else bot.user.default_avatar.url)
        embed.set_image(url="https://media.discordapp.net/attachments/1328845912646356994/1360262128543596845/WhiteLine.png")  # Remplacez par l'URL de votre image

        # Cr√©er une vue avec le bouton
        view = BumpReminderView()

        # Envoyer le message avec l'embed et le bouton
        reminder_message = await main_channel.send(embed=embed, view=view)

        # Supprimer le message apr√®s x minutes
        await asyncio.sleep(config.dell_last_bump)  
        await reminder_message.delete()
#FIN}

''''
#{DEBUT : Impl√©menter la v√©rification des streams (√¢che asynchrone)
async def get_twitch_access_token(): # Fonction pour obtenir un token d'acc√®s Twitch
    url = "https://id.twitch.tv/oauth2/token"
    params = {
        "client_id": config.twitch_client_id,
        "client_secret": config.twitch_client_secret,
        "grant_type": "client_credentials"
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, params=params) as response:
            data = await response.json()
            return data["access_token"]

# Fonction pour v√©rifier si une cha√Æne Twitch est en direct
async def is_twitch_channel_live(access_token, channel_name):
    url = f"https://api.twitch.tv/helix/streams"
    headers = {
        "Client-ID": config.twitch_client_id,
        "Authorization": f"Bearer {access_token}"
    }
    params = {"user_login": channel_name}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers, params=params) as response:
            data = await response.json()
            return data["data"]  # Retourne les donn√©es si la cha√Æne est en direct

# T√¢che pour v√©rifier r√©guli√®rement l'√©tat des cha√Ænes Twitch
@tasks.loop(minutes=1)  # V√©rifie toutes les 1 minutes
async def check_twitch_streams():
    try:
        access_token = await get_twitch_access_token()
        announcement_channel = bot.get_channel(config.stream_announcement_channel_id)

        for channel_name in config.twitch_channels:
            stream_data = await is_twitch_channel_live(access_token, channel_name)
            if stream_data:
                # La cha√Æne est en direct
                stream_info = stream_data[0]
                stream_title = stream_info["title"]
                stream_url = f"https://www.twitch.tv/{channel_name}"

                # Envoyer une notification dans le salon Discord
                if announcement_channel:
                    await announcement_channel.send(
                        f"üéÆ **{channel_name}** est maintenant en direct sur Twitch !\n"
                        f"**Titre du stream :** {stream_title}\n"
                        f"üîó Regardez le stream ici : {stream_url}"
                    )
    except Exception as e:
        print(f"Erreur lors de la v√©rification des streams Twitch : {e}")
#FIN}'''


#{DEBUT : Event de demarrage de l'application
print("D√©marrage de la connexion avec le client discord")
@bot.event
async def on_ready(): #fonction de lancement.
    print(f'\033[92m{bot.user.name} est en ligne ‚úî \033[0m')
    status_swap.start() #lancement des status.
    bump_reminder.start()  # Lancement des rappels de bump
    #check_twitch_streams.start()  # Lancement de la v√©rification des streams Twitch
    try:
        synced = await bot.tree.sync()
        print(f"\033[92mCommandes synchronis√©es : {len(synced)} commandes ‚úî\033[0m")
    except Exception as e:
        print(f"\033[91mErreur lors de la synchronisation des commandes slash et pr√©fixes : {e}\033[0m")
#FIN}

#{DEBUT : Event de detection des messages
async def log_moderation_action(guild, message, reason):
    """
    :param guild: Le serveur (guild) o√π l'action a eu lieu.
    :param message: Le message qui a √©t√© mod√©r√©.
    :param reason: La raison de la mod√©ration.
    """
    log_channel_id = config.log_channel  # ID du salon de journalisation (√† d√©finir dans config.py)
    log_channel = guild.get_channel(log_channel_id)

    if log_channel:
        embed = discord.Embed(
            title="Action de mod√©ration automatique",
            description=f"Un message a √©t√© supprim√© pour la raison suivante : {reason}",
            color=discord.Color.red(),
            timestamp=message.created_at
        )
        embed.add_field(name="Auteur", value=f"{message.author.mention} ({message.author.id})", inline=False)
        embed.add_field(name="Message", value=message.content, inline=False)
        embed.add_field(name="Salon", value=message.channel.mention, inline=False)
        embed.set_footer(text=f"ID du message : {message.id}")
        await log_channel.send(embed=embed)

#{DEBUT : Event de detection des messages
#--------------------------------------
# EVENEMENT IA DE L'APPLICATION
conversation_manager = memory.memory(max_history=config.max_history) # management de l'historie des conversations.
memory_instance = memory.memory() # instance de la classe memory
memory_instance.clear_inactive_conversations(config.del_history) # nettoyer les conversations inactives apr√®s 1 heure (par d√©faut).
def split_message(message, max_length=2000): #fonction pour la gestion du nombre de caract√®re max des reponses.
    return [message[i:i+max_length] for i in range(0, len(message), max_length)]
#FIN}

# Fonctionnalit√© de confession
class ConfessionModal(discord.ui.Modal, title="Confession"):
    def __init__(self, confession_number: int, previous_message=None):
        super().__init__()
        self.confession_number = confession_number
        self.previous_message = previous_message  # Message pr√©c√©dent contenant l'embed

        # Champ pour saisir la confession
        self.confession_input = discord.ui.TextInput(
            label="Votre confession",
            style=discord.TextStyle.long,
            placeholder="√âcrivez votre confession ici...",
            required=True
        )
        # Ajout du champ de texte √† la vue
        self.add_item(self.confession_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Cr√©e une vue avec le bouton de confession
            view = ConfessionButtonView(previous_message=None)  # Pas de message pr√©c√©dent pour la premi√®re confession

            # Diff√©rer la r√©ponse pour √©viter le d√©lai de 3 secondes
            await interaction.response.defer(ephemeral=True)

            # R√©cup√©rer le texte de la confession
            confession_text = self.confession_input.value

            # Cr√©er un embed pour la confession
            embed = discord.Embed(
                title=f"Confession #{self.confession_number}",
                description=f"```{confession_text}```",
                color=discord.Color.from_rgb(255, 255, 255)  # Couleur blanche
            )
            embed.set_image(url="https://media.discordapp.net/attachments/1328845912646356994/1360262128543596845/WhiteLine.png")  # Remplacez par l'URL de votre image

            # R√©cup√©rer le salon de confession depuis le fichier de configuration
            confession_channel_id = config.confession_channel
            confession_channel = interaction.guild.get_channel(confession_channel_id)

            # V√©rifiez si le salon est valide
            if not confession_channel:
                raise ValueError("Le salon de confession configur√© est introuvable ou invalide.")

            # Cr√©er une vue avec le bouton "Se confesser"
            view = ConfessionButtonView()

            # Supprimer le bouton de l'embed pr√©c√©dent (si applicable)
            if self.previous_message:
                try:
                    await self.previous_message.edit(view=None)  # Supprime la vue du message pr√©c√©dent
                except discord.NotFound:
                    print("Le message pr√©c√©dent est introuvable ou a √©t√© supprim√©.")
                except discord.HTTPException as e:
                    print(f"Erreur HTTP lors de la modification du message pr√©c√©dent : {e}")

            # Envoyer l'embed dans le salon de confession avec le bouton
            new_message = await confession_channel.send(embed=embed, view=view)

             # Cr√©er un fil pour la confession
            thread = await confession_channel.create_thread(
                name=f"Confession #{self.confession_number}",
                message=new_message,
                auto_archive_duration=1440  # Dur√©e d'archivage automatique en minutes (1 jour)
            )

            # Envoyer un message dans le fil pour accueillir les participants
            await thread.send(f"Bienvenue dans le fil de discussion pour la **Confession #{self.confession_number}**.")

            # Passez le message √† la vue pour qu'il puisse √™tre modifi√© plus tard
            view.previous_message = new_message

            # R√©pondre √† l'utilisateur pour confirmer la soumission
            await interaction.followup.send(
                "‚úÖ Votre confession a √©t√© soumise anonymement.",
                ephemeral=True
            )
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå Une erreur s'est produite : {e}",
                ephemeral=True
            )

class ConfessionButtonView(discord.ui.View):
    def __init__(self, previous_message=None):
        super().__init__(timeout=None)
        self.previous_message = previous_message

    @discord.ui.button(label="Se confesser", style=discord.ButtonStyle.gray, emoji="<:Crayon:1360619525380374719>")
    async def confess_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Charger le num√©ro de la derni√®re confession
        with open(confession_counter_file, "r") as f:
            counter_data = json.load(f)

        # Incr√©menter le num√©ro de confession
        confession_number = counter_data["last_confession_number"] + 1
        counter_data["last_confession_number"] = confession_number

        # Sauvegarder le nouveau num√©ro de confession
        with open(confession_counter_file, "w") as f:
            json.dump(counter_data, f, indent=4)

        # Ouvrir le modal pour saisir la confession
        modal = ConfessionModal(confession_number, previous_message=self.previous_message)
        await interaction.response.send_modal(modal)
        
@bot.event
async def on_message(message):
    """
    Fonction pour g√©rer les messages envoy√©s dans les salons.
    """
    # Ignore les messages envoy√©s par le bot lui-m√™me ou par d'autres bots
    if message.author.bot:
        return
    
    #{ IA ==========================================================================================
    try:
        keyWord = config.keyWord # Liste des mots-cl√©s pour d√©clencher la r√©ponse du bot.
        if isinstance(message.channel, discord.DMChannel):#(2)
            userId = message.author.id
            UserMsg = message.content
            #prompt = conversation_manager.manage_chatting(userId, UserMsg)
            prompt = conversation_manager.manage_chatting(userId, UserMsg)

            try: 
                response_parts = split_message(prompt) #s√©paration de la r√©ponse en parties pour √©viter les d√©passements de caract√®res.
                for part in response_parts: #envoi de chaque partie de la r√©ponse.
                    await message.reply(part)
                    return

            except Exception as e: #gestion des erreurs
                return f"Une erreur s'est produite: {e}"
            
        if bot.user.mention in message.content or any(keyword in message.content for keyword in keyWord) or message.reference and message.reference.resolved and message.reference.resolved.author == bot.user:
            userId = message.author.id
            UserMsg = message.content
            prompt = conversation_manager.manage_chatting(userId, UserMsg)

            try:
                response_parts = split_message(prompt) #s√©paration de la r√©ponse en parties pour √©viter les d√©passements de caract√®res.
                for part in response_parts: #envoi de chaque partie de la r√©ponse.
                    await message.reply(part)

            except Exception as e: #gestion des erreurs.
                return await f"Une erreur c'est produite: {e}"

    except Exception as e:
        pass
    #===============================================================================================}

    # Fonctionnalit√© 1 : R√©ponse automatique √† une commande personnalis√©e
    # Charger les commandes personnalis√©es
    with open(custom_commands_file, "r") as f:
        custom_commands = json.load(f)

    # V√©rifie si le message correspond √† une commande personnalis√©e
    if message.content in custom_commands:
        await message.channel.send(custom_commands[message.content])
        return

    # Fonctionnalit√© 2 : Syst√®me de mod√©ration (suppression de mots interdits)
    banned_words = config.banned_words  # Liste des mots interdits
    if any(banned_word in message.content.lower() for banned_word in banned_words):
        try:
            await message.delete()
            await message.channel.send(
                f"{message.author.mention}, votre message a √©t√© supprim√© car il contient des mots interdits.",
                delete_after=5  # Supprime le message d'avertissement apr√®s 5 secondes
            )
            # Journalisation de l'action
            await log_moderation_action(message.guild, message, "Contenu interdit")
        except discord.Forbidden:
            print(f"Impossible de supprimer le message de {message.author} dans {message.channel}.")
        except discord.HTTPException as e:
            print(f"Erreur HTTP lors de la suppression du message : {e}")

    # Fonctionnalit√© 3 : R√©action automatique √† un message sp√©cifique
    autoreaction_words = config.autoreaction_words  # Liste des mots d√©clencheurs de r√©action
    if any(word in message.content.lower() for word in autoreaction_words):
        await message.add_reaction("üëã")
     
    # Fonctionnalit√© 4 : D√©tection de bump de Disboard
    """
    D√©tecte les messages de Disboard pour attribuer des XP apr√®s un bump r√©ussi.
    """
    # Ignore les messages envoy√©s par le bot lui-m√™me
    if message.author.bot:
        # V√©rifie si le message provient de Disboard
        if message.author.name in config.bump_bots and any(bump_message in message.content for bump_message in config.bump_messages):
            # Extraire l'utilisateur qui a bump√©
            bump_user = message.mentions[0] if message.mentions else None

            if bump_user:
                # Charger les donn√©es de niveaux
                with open(levels_file, "r") as f:
                    levels = json.load(f)

                user_id = str(bump_user.id)
                if user_id not in levels:
                    levels[user_id] = {"xp": 0, "level": 1}

                # Ajouter 30 XP √† l'utilisateur
                levels[user_id]["xp"] += 30

                # Sauvegarder les donn√©es de niveaux
                with open(levels_file, "w") as f:
                    json.dump(levels, f, indent=4)

                # Envoyer un message dans le salon principal
                main_channel = bot.get_channel(config.main_channel_id)
                if main_channel:
                    await main_channel.send(
                        f"<:froggyheart:1283815216844505091> Merci {bump_user.mention} d'avoir bump√© le serveur ! Vous avez gagn√© **30 XP** !"
                    )

    # Fonctionnalit√© 5 : V√©rifie si le message est "$$.confess" dans le salon de confession
    if message.content.strip() == "$$.confess":
        # V√©rifie si l'utilisateur a la permission de g√©rer les messages (par exemple, administrateur)
        if not message.author.guild_permissions.manage_messages:
            await message.channel.send(
                embed=discord.Embed(
                    title="‚ùå Permission refus√©e",
                    description="Vous n'avez pas la permission de configurer les confessions.",
                    color=discord.Color.red()
                )
            )
            return
        
        # R√©cup√©rer le salon de confession depuis le fichier de configuration
        confession_channel_id = config.confession_channel
        confession_channel = message.guild.get_channel(confession_channel_id)
        # V√©rifiez si le salon est valide
        if not confession_channel:
            await message.channel.send(
                embed=discord.Embed(
                    title="‚ùå Erreur",
                    description="Le salon de confession configur√© est introuvable. Veuillez v√©rifier l'ID dans le fichier de configuration.",
                    color=discord.Color.red()
                )
            )
            return
        
        # Cr√©e une vue avec le bouton de confession
        view = ConfessionButtonView()

        # Cr√©e un embed pour le message de configuration
        embed = discord.Embed(
            title="<:super:1243293274622525510> Confessions anonymes",
            description="```Cliquez sur le bouton ci-dessous pour faire une confession anonyme.```",
            color=discord.Color.from_rgb(255, 255, 255)  # Couleur blanche
        )
        embed.set_footer(text="Les confessions sont anonymes et confidentielles.")
        embed.set_thumbnail(url=bot.user.avatar.url if bot.user.avatar else bot.user.default_avatar.url)
        embed.set_image(url="https://media.discordapp.net/attachments/1328845912646356994/1360262128543596845/WhiteLine.png?ex=67fa7a53&is=67f928d3&hm=ef4a72dd72a96b476c388f481ff117933cbdeedcd2bf5025cd45e6d05cb6744d&=&width=1638&height=21")  # Remplacez par l'URL de votre image

        # Envoie le message avec l'embed et le bouton
        embed_message = await message.channel.send(embed=embed, view=view)

        # Passez le message √† la vue pour qu'il puisse √™tre modifi√© plus tard
        view.previous_message = embed_message

        # Supprime le message de commande pour garder le salon propre
        await message.delete()
    
    # Fonctionnalit√© 5 : Cr√©ation automatique de fils de discussion
    # Liste des salons o√π les fils doivent √™tre cr√©√©s automatiquement
    thread_channels = config.thread_channels  # Liste des IDs des salons (√† d√©finir dans votre fichier de configuration)

    # V√©rifie si le message est envoy√© dans un salon sp√©cifique
    if message.channel.id in thread_channels:
        # Charger les compteurs de fils
        with open(thread_counters_file, "r") as f:
            thread_counters = json.load(f)

        # Obtenir le compteur pour le salon actuel
        channel_id_str = str(message.channel.id)
        if channel_id_str not in thread_counters:
            thread_counters[channel_id_str] = 1  # Initialiser le compteur pour ce salon

        # Cr√©e un fil pour le message avec un num√©ro
        thread_number = thread_counters[channel_id_str]

        # D√©terminer le titre du fil
        if message.content.strip():  # Si le message contient du texte
            thread_name = message.content.split("\n")[0][:50]  # Prend la premi√®re ligne (max 50 caract√®res)
        else:
            thread_name = f"fil #{thread_number}"  # Titre par d√©faut si le message est vide

        # Cr√©er le fil
        thread = await message.channel.create_thread(
        name=thread_name,
        message=message,
        auto_archive_duration=1440  # Dur√©e d'archivage automatique en minutes (1 jour)
        )
        await thread.send(f"Bienvenue dans le fil de discussion #{thread_number} pour le message de {message.author.mention} !")

        # Incr√©menter le compteur et sauvegarder
        thread_counters[channel_id_str] += 1
        with open(thread_counters_file, "w") as f:
            json.dump(thread_counters, f, indent=4)
       
    # Fonctionnalit√© 6 :Syst√®me de niveaux
    # Charger les donn√©es de niveaux
    with open(levels_file, "r") as f:
        levels = json.load(f)

    user_id = str(message.author.id)  # ID de l'utilisateur sous forme de cha√Æne
    if user_id not in levels:
        levels[user_id] = {"xp": 0, "level": 1}

    # Emp√™cher les membres "En Prison" de gagner de l'XP
    prison_role = discord.utils.get(message.guild.roles, name="En Prison")
    if prison_role and prison_role in getattr(message.author, "roles", []):
        # On ne donne pas d'XP, ni de level up, ni de r√¥le de niveau
        # Mais on continue √† traiter les commandes si besoin
        if message.content.startswith(config.prefix):
            await bot.process_commands(message)
        return

    # Ajouter de l'XP pour chaque message
    levels[user_id]["xp"] += 10  # Vous pouvez ajuster la valeur d'XP par message
    current_xp = levels[user_id]["xp"]
    current_level = levels[user_id]["level"]

    # Calculer le seuil pour monter de niveau
    next_level_xp = current_level * 100  # Exemple : 100 XP pour le niveau 1, 200 pour le niveau 2, etc.
    new_level = None  # Initialise la variable new_level
    if current_xp >= next_level_xp:
        levels[user_id]["level"] += 1
        levels[user_id]["xp"] = 0  # R√©initialiser l'XP apr√®s la mont√©e de niveau
        new_level = levels[user_id]["level"]
        await message.channel.send(f"üéâ {message.author.mention} a atteint le niveau {new_level} !")
    
    # Liste des niveaux et des r√¥les correspondants
    level_roles = config.level_roles  # Dictionnaire des r√¥les par niveau
    level_up_messages = config.level_up_messages  # Liste des messages de mont√©e de niveau
    # V√©rifie si le membre a atteint un niveau avec un r√¥le
    if new_level in level_roles:
        role_name = level_roles[new_level]
        guild = message.guild  # R√©cup√®re le serveur (guild)
        role = discord.utils.get(guild.roles, name=role_name)  # R√©cup√®re le r√¥le par son nom

        if role:
            # Supprime les anciens r√¥les de niveau
            for level, old_role_name in level_roles.items():
                if level < new_level:  # Supprime uniquement les r√¥les des niveaux inf√©rieurs
                    old_role = discord.utils.get(guild.roles, name=old_role_name)
                    if old_role in message.author.roles:
                        await message.author.remove_roles(old_role)
            # Ajoute le nouveau r√¥le
            await message.author.add_roles(role)

        # Envoie le message de mont√©e en niveau dans un salon sp√©cifique
        level_up_channel_id = config.level_up_channel  # ID du salon de mont√©e en niveau
        level_up_channel = guild.get_channel(level_up_channel_id)

        if level_up_channel:
            random_message = random.choice(level_up_messages).format(user=message.author.mention, level=new_level)
            await level_up_channel.send(random_message)
        else:
            print(f"[ALERTE] Le salon de mont√©e en niveau (ID: {level_up_channel_id}) n'existe pas dans le serveur {guild.name}.")

    # Sauvegarder les donn√©es de niveaux
    with open(levels_file, "w") as f:
        json.dump(levels, f, indent=4)

    # V√©rifie si le message commence par le pr√©fixe avant de traiter les commandes
    if message.content.startswith(config.prefix):
        await bot.process_commands(message)
#FIN} 
 
 #{DEBUT : Event pour les salon vocaux !
@bot.event
async def on_voice_state_update(member, before, after):
    """
    Suivi du temps pass√© en vocal, du nombre de fois o√π un membre est all√© en vocal,
    et attribution d'XP en fonction du temps pass√©.
    """

   # Ignorer les bots
    if member.bot:
        return
    
    # Charger les donn√©es de suivi des vocaux
    with open(voice_activity_file, "r") as f:
        voice_activity = json.load(f)

    # Charger les donn√©es de niveaux
    with open(levels_file, "r") as f:
        levels = json.load(f)

    user_id = str(member.id)  # ID de l'utilisateur sous forme de cha√Æne

    # Initialiser les donn√©es pour l'utilisateur s'il n'existe pas encore
    if user_id not in voice_activity:
        voice_activity[user_id] = {
            "total_time": 0,  # Temps total pass√© en vocal (en secondes)
            "join_count": 0,  # Nombre de fois o√π l'utilisateur est all√© en vocal
            "last_join": None  # Derni√®re heure de connexion
        }

    if user_id not in levels:
        levels[user_id] = {"xp": 0, "level": 1}

    # Emp√™cher les membres "En Prison" de gagner de l'XP vocal
    prison_role = discord.utils.get(member.guild.roles, name="En Prison")
    if prison_role and prison_role in getattr(member, "roles", []):
        # On ne donne pas d'XP vocal, mais on continue √† enregistrer les entr√©es/sorties si besoin
        # On sauvegarde quand m√™me le temps total et le compteur de join, mais pas d'XP
        if after.channel and (not before.channel or before.channel.id != after.channel.id):
            voice_activity[user_id]["join_count"] += 1
            voice_activity[user_id]["last_join"] = int(time.time())
        if before.channel and (not after.channel or before.channel.id != after.channel.id):
            last_join = voice_activity[user_id]["last_join"]
            if last_join:
                time_spent = int(time.time()) - last_join
                voice_activity[user_id]["total_time"] += time_spent
                voice_activity[user_id]["last_join"] = None
        # Sauvegarder les donn√©es de suivi des vocaux
        with open(voice_activity_file, "w") as f:
            json.dump(voice_activity, f, indent=4)
        # Sauvegarder les donn√©es de niveaux (inchang√©es)
        with open(levels_file, "w") as f:
            json.dump(levels, f, indent=4)
        return

    # Si l'utilisateur rejoint un salon vocal
    if after.channel and (not before.channel or before.channel.id != after.channel.id):
        voice_activity[user_id]["join_count"] += 1  # Incr√©menter le compteur de connexions
        voice_activity[user_id]["last_join"] = int(time.time())  # Enregistrer l'heure de connexion

    # Si l'utilisateur quitte un salon vocal
    if before.channel and (not after.channel or before.channel.id != after.channel.id):
        last_join = voice_activity[user_id]["last_join"]
        if last_join:
            time_spent = int(time.time()) - last_join  # Calculer le temps pass√©
            voice_activity[user_id]["total_time"] += time_spent  # Ajouter au temps total
            voice_activity[user_id]["last_join"] = None  # R√©initialiser l'heure de connexion

            # Ajouter des XP en fonction du temps pass√© (20 XP par minute)
            xp_earned = (time_spent // 60) * 20  # 20 XP par minute
            levels[user_id]["xp"] += xp_earned

            # V√©rifier si l'utilisateur monte de niveau
            current_xp = levels[user_id]["xp"]
            current_level = levels[user_id]["level"]
            next_level_xp = current_level * 100  # Exemple : 100 XP pour le niveau 1, 200 pour le niveau 2, etc.
            new_level = None

            if current_xp >= next_level_xp:
                levels[user_id]["level"] += 1
                levels[user_id]["xp"] = 0  # R√©initialiser l'XP apr√®s la mont√©e de niveau
                new_level = levels[user_id]["level"]

                # Envoyer un message de mont√©e de niveau
                level_up_channel_id = config.level_up_channel  # ID du salon de mont√©e en niveau
                level_up_channel = member.guild.get_channel(level_up_channel_id)
                if level_up_channel:
                    await level_up_channel.send(
                        f"üéâ {member.mention} a atteint le niveau {new_level} gr√¢ce √† son activit√© vocale !"
                    )

    # Sauvegarder les donn√©es de suivi des vocaux
    with open(voice_activity_file, "w") as f:
        json.dump(voice_activity, f, indent=4)

    # Sauvegarder les donn√©es de niveaux
    with open(levels_file, "w") as f:
        json.dump(levels, f, indent=4)
 #FIN}


 #{DEBUT : Event de bienvenue 
class WelcomeButtonView(View):
    def __init__(self, member):
        super().__init__(timeout=None)  # Pas de timeout pour garder le bouton actif
        self.member = member
        self.welcome_count = 0  # Compteur de clics sur le bouton
        self.clicked_users = set()  # Ensemble pour stocker les utilisateurs ayant cliqu√©

        # Liste d'ic√¥nes al√©atoires
        self.icons = config.icons  # Liste d'ic√¥nes √† d√©finir dans votre fichier de configuration
        self.current_icon = random.choice(self.icons)  # Choisir une ic√¥ne al√©atoire

    @discord.ui.button(label="Souhaiter la bienvenue", style=discord.ButtonStyle.green, emoji="üéâ")
    async def welcome_button(self, interaction: discord.Interaction, button: Button):
        """
        Action d√©clench√©e lorsqu'un utilisateur clique sur le bouton.
        """
        # V√©rifier si l'utilisateur a d√©j√† cliqu√©
        if interaction.user.id in self.clicked_users:
            await interaction.response.send_message(
                "‚ùå Vous avez d√©j√† souhait√© la bienvenue √† cet utilisateur !",
                ephemeral=True
            )
            return

        # Ajouter l'utilisateur √† la liste des utilisateurs ayant cliqu√©
        self.clicked_users.add(interaction.user.id)

        # Charger les donn√©es de niveaux
        with open(levels_file, "r") as f:
            levels = json.load(f)

        # Ajouter 10 XP √† l'utilisateur qui clique
        user_id = str(interaction.user.id)
        if user_id not in levels:
            levels[user_id] = {"xp": 0, "level": 1}
        levels[user_id]["xp"] += 10

        # Sauvegarder les donn√©es de niveaux
        with open(levels_file, "w") as f:
            json.dump(levels, f, indent=4)

        # Mettre √† jour le compteur de clics
        self.welcome_count += 1
        self.current_icon = random.choice(self.icons)  # Changer l'ic√¥ne al√©atoire
        button.label = f"{self.welcome_count} membre(s) vous souhaitent la bienvenue !"
        button.emoji = self.current_icon  # Mettre √† jour l'ic√¥ne du bouton
        await interaction.response.edit_message(view=self)

        # Envoyer un message √©ph√©m√®re pour informer l'utilisateur
        await interaction.followup.send(
            f"üéâ Vous avez gagn√© **10 XP** pour avoir souhait√© la bienvenue √† {self.member.mention} !",
            ephemeral=True
        )


@bot.event
async def on_member_join(member):
    """
    √âv√©nement d√©clench√© lorsqu'un utilisateur rejoint le serveur.
    Envoie un message de bienvenue avec un bouton interactif.
    Le message est automatiquement supprim√© apr√®s 20 minutes.
    """
    # R√©cup√©rer le salon de bienvenue
    welcome_channel_id = config.welcome_channel  # ID du salon de bienvenue
    welcome_channel = bot.get_channel(welcome_channel_id)

    if welcome_channel:
        # Choisir un message de bienvenue al√©atoire
        welcome_message = random.choice(config.welcome_messages).format(member=member)

        # Cr√©er une vue avec le bouton
        view = WelcomeButtonView(member)

        # Envoyer le message de bienvenue avec le bouton
        message = await welcome_channel.send(
            welcome_message,
            view=view
        )

        # Supprimer le message apr√®s 20 minutes
        await asyncio.sleep(1200)  # 1200 secondes = 20 minutes
        await message.delete()
 #FIN}

#{DEBUT : CMD de Verrouilliage !
@bot.tree.command(name="lock", description="Verrouiller le salon ou le fil actuel.")
async def lock(interaction: discord.Interaction):
    """
    Commande pour verrouiller le salon ou le fil o√π la commande est ex√©cut√©e.
    Seuls les administrateurs ou le cr√©ateur du fil peuvent ex√©cuter cette commande.
    """
    channel = interaction.channel  # R√©cup√®re le salon ou le fil actuel
    user = interaction.user  # R√©cup√®re l'utilisateur qui ex√©cute la commande

    # V√©rifie si l'utilisateur est administrateur
    if not user.guild_permissions.administrator:
        # Si le canal est un fil, v√©rifie si l'utilisateur est le cr√©ateur du fil
        if isinstance(channel, discord.Thread) and channel.owner_id != user.id:
            await interaction.response.send_message(
                "Vous devez √™tre administrateur ou le cr√©ateur de ce fil pour ex√©cuter cette commande.",
                ephemeral=True
            )
            return
        # Si ce n'est pas un fil, l'utilisateur doit √™tre administrateur
        elif not isinstance(channel, discord.Thread):
            await interaction.response.send_message(
                "Vous devez √™tre administrateur pour ex√©cuter cette commande.",
                ephemeral=True
            )
            return

    # V√©rifie le type de canal
    if isinstance(channel, discord.TextChannel):
        # Verrouille un salon textuel
        await channel.set_permissions(interaction.guild.default_role, send_messages=False)
        await interaction.response.send_message(f"Le salon textuel {channel.name} a √©t√© verrouill√©.", ephemeral=True)

    elif isinstance(channel, discord.Thread):
        # Verrouille un fil
        await channel.edit(locked=True)
        await interaction.response.send_message(f"Le fil {channel.name} a √©t√© verrouill√©.", ephemeral=True)

    else:
        # Si le type de salon n'est pas pris en charge
        await interaction.response.send_message("Ce type de salon ne peut pas √™tre verrouill√©.", ephemeral=True)
#FIN}

#{DEBUT : CMD Supprimer un ou plusieurs messages dans le salon actuel.
@bot.tree.command(name="clear", description="Supprimer un ou plusieurs messages dans le salon actuel.")
async def clear(interaction: discord.Interaction, user: discord.User = None, limit: int = 10):
    """
    :param user: L'utilisateur dont les messages doivent √™tre supprim√©s.
    :param limit: Le nombre maximum de messages √† v√©rifier.
    """
    channel = interaction.channel  # R√©cup√®re le salon actuel

    # V√©rifie si le canal est un salon textuel
    if not isinstance(channel, discord.TextChannel):
        await interaction.response.send_message("Cette commande ne peut √™tre utilis√©e que dans un salon textuel.", ephemeral=True)
        return

    # V√©rifie si l'utilisateur a la permission de g√©rer les messages
    if not interaction.user.guild_permissions.manage_messages:
        await interaction.response.send_message("Vous n'avez pas la permission de g√©rer les messages.", ephemeral=True)
        return
    
    # Envoie une r√©ponse diff√©r√©e pour √©viter l'expiration de l'interaction
    await interaction.response.defer(ephemeral=True)

    # Supprime les messages
    def check_message(message):
        return user is None or message.author == user

    deleted = await channel.purge(limit=limit, check=check_message)
    await interaction.followup.send(f"{len(deleted)} message(s) supprim√©(s).", ephemeral=True)
#FIN}

#{DEBUT : CMD afficher le niveau d'un utilisateur ou votre propre niveau.
@bot.tree.command(name="level", description="Afficher le niveau d'un utilisateur ou votre propre niveau.")
async def level(interaction: discord.Interaction, user: discord.User = None):
    """
    :param interaction: L'interaction Discord.
    :param user: L'utilisateur dont le niveau doit √™tre affich√© (facultatif).
    """
    # Si aucun utilisateur n'est mentionn√©, utiliser l'utilisateur qui ex√©cute la commande
    if user is None:
        user = interaction.user

    # Charger les donn√©es de niveaux
    with open(levels_file, "r") as f:
        levels = json.load(f)

    user_id = str(user.id)  # ID de l'utilisateur sous forme de cha√Æne

    # V√©rifie si l'utilisateur a des donn√©es de niveau
    if user_id not in levels:
        await interaction.response.send_message(f"{user.mention} n'a pas encore de niveau.", ephemeral=True)
        return

    # R√©cup√®re le niveau et l'XP de l'utilisateur
    user_level = levels[user_id]["level"]
    user_xp = levels[user_id]["xp"]
    next_level_xp = user_level * 100  # Calcul du seuil pour le prochain niveau

    # Envoie une r√©ponse avec les informations de niveau
    await interaction.response.send_message(
        f"üìä {user.mention} est au niveau **{user_level}** avec **{user_xp}/{next_level_xp} XP**.",
        ephemeral=True
    )
#FIN}

#{DEBUT : CMD Ajouter de XP manuellement √† un utilisateur.
@bot.tree.command(name="add_xp", description="Ajouter des XP √† un utilisateur.")
async def add_xp(interaction: discord.Interaction, user: discord.User, xp: int):
    """
    :param interaction: L'interaction Discord.
    :param user: L'utilisateur √† qui ajouter des XP.
    :param xp: Le nombre d'XP √† ajouter.
    """
    # V√©rifie si l'utilisateur qui ex√©cute la commande est administrateur
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("Vous n'avez pas la permission d'utiliser cette commande.", ephemeral=True)
        return

    # Charger les donn√©es de niveaux
    with open(levels_file, "r") as f:
        levels = json.load(f)

    user_id = str(user.id)  # ID de l'utilisateur sous forme de cha√Æne

    # V√©rifie si l'utilisateur a des donn√©es de niveau, sinon les initialise
    if user_id not in levels:
        levels[user_id] = {"xp": 0, "level": 1}

    # Ajouter les XP √† l'utilisateur
    levels[user_id]["xp"] += xp
    current_xp = levels[user_id]["xp"]
    current_level = levels[user_id]["level"]

    # Calculer le seuil pour monter de niveau
    next_level_xp = current_level * 100
    new_level = None

    # V√©rifie si l'utilisateur monte de niveau
    while current_xp >= next_level_xp:
        levels[user_id]["level"] += 1
        current_xp -= next_level_xp
        next_level_xp = levels[user_id]["level"] * 100
        new_level = levels[user_id]["level"]

    # Met √† jour les XP restants
    levels[user_id]["xp"] = current_xp

    # Sauvegarder les donn√©es de niveaux
    with open(levels_file, "w") as f:
        json.dump(levels, f, indent=4)

    # R√©ponse √† l'utilisateur
    if new_level:
        await interaction.response.send_message(
            f"üéâ {user.mention} a re√ßu **{xp} XP** et est maintenant au niveau **{new_level}** avec **{current_xp}/{next_level_xp} XP**.",
            ephemeral=True
        )
    else:
        await interaction.response.send_message(
            f"üéâ {user.mention} a re√ßu **{xp} XP** et est maintenant √† **{current_xp}/{next_level_xp} XP** pour le niveau **{current_level}**.",
            ephemeral=True
        )
#FIN}

#{DEBUT : CMD Retirer des xp √† un utilisateur.
@bot.tree.command(name="remove_xp", description="Retirer des XP √† un utilisateur.")
async def remove_xp(interaction: discord.Interaction, user: discord.User, xp: int):
    """
    Commande pour retirer des XP √† un utilisateur.
    :param interaction: L'interaction Discord.
    :param user: L'utilisateur √† qui retirer des XP.
    :param xp: Le nombre d'XP √† retirer.
    """
    # V√©rifie si l'utilisateur qui ex√©cute la commande est administrateur
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("Vous n'avez pas la permission d'utiliser cette commande.", ephemeral=True)
        return

    # Charger les donn√©es de niveaux
    with open(levels_file, "r") as f:
        levels = json.load(f)

    user_id = str(user.id)  # ID de l'utilisateur sous forme de cha√Æne

    # V√©rifie si l'utilisateur a des donn√©es de niveau, sinon les initialise
    if user_id not in levels:
        levels[user_id] = {"xp": 0, "level": 1}

    # Retirer les XP √† l'utilisateur
    levels[user_id]["xp"] -= xp
    if levels[user_id]["xp"] < 0:  # Si les XP deviennent n√©gatifs, ajustez-les
        levels[user_id]["xp"] = 0

    current_xp = levels[user_id]["xp"]
    current_level = levels[user_id]["level"]

    # V√©rifie si l'utilisateur descend de niveau
    while current_xp < 0 and current_level > 1:
        levels[user_id]["level"] -= 1
        current_level = levels[user_id]["level"]
        current_xp += current_level * 100  # Ajoute le seuil du niveau pr√©c√©dent

    # Met √† jour les XP restants
    levels[user_id]["xp"] = current_xp

    # Sauvegarder les donn√©es de niveaux
    with open(levels_file, "w") as f:
        json.dump(levels, f, indent=4)

    # R√©ponse √† l'utilisateur
    await interaction.response.send_message(
        f"üìâ {user.mention} a perdu **{xp} XP** et est maintenant au niveau **{current_level}** avec **{current_xp}/{current_level * 100} XP**.",
        ephemeral=True
    )
#FIN}

#{DEBUT : CMD Envoie de message
@bot.tree.command(name="message", description="Envoyer un message dans un salon sp√©cifique.")
async def message(interaction: discord.Interaction, channel: discord.TextChannel, message: str):
    """
    :param interaction: L'interaction Discord.
    :param channel: Le salon o√π envoyer le message.
    :param message: Le contenu du message √† envoyer.
    """
    # V√©rifie si l'utilisateur qui ex√©cute la commande est administrateur
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("Vous n'avez pas la permission d'utiliser cette commande.", ephemeral=True)
        return

    # Envoie le message dans le salon sp√©cifi√©
    try:
        await channel.send(message)
        await interaction.response.send_message(f"Message envoy√© dans {channel.mention} :\n{message}", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"Une erreur s'est produite lors de l'envoi du message : {e}", ephemeral=True)
#FIN}

#{DEBUT : CMD Info utilisateur
@bot.tree.command(name="user_info", description="Obtenir des informations d√©taill√©es sur un utilisateur.")
async def user_info(interaction: discord.Interaction, user: discord.User = None):
    """
    Commande pour afficher des informations d√©taill√©es sur un utilisateur sous forme d'embed.
    :param interaction: L'interaction Discord.
    :param user: L'utilisateur dont les informations doivent √™tre affich√©es (facultatif).
    """
    # Si aucun utilisateur n'est mentionn√©, utiliser l'utilisateur qui ex√©cute la commande
    if user is None:
        user = interaction.user

    # R√©cup√©rer les informations du membre si possible
    member = interaction.guild.get_member(user.id)

    # Charger les donn√©es de sanctions
    with open(sanctions_file, "r") as f:
        sanctions = json.load(f)

    # Charger les donn√©es de suivi des vocaux
    with open(voice_activity_file, "r") as f:
        voice_activity = json.load(f)

    user_id = str(user.id)  # ID de l'utilisateur sous forme de cha√Æne

    # R√©cup√©rer les sanctions de l'utilisateur
    user_sanctions = sanctions.get(user_id, {"ban": 0, "mute": 0, "warn": 0})
    ban_count = user_sanctions["ban"]
    mute_count = user_sanctions["mute"]
    warn_count = user_sanctions["warn"]

    # R√©cup√©rer les donn√©es de suivi des vocaux
    user_voice_data = voice_activity.get(user_id, {"total_time": 0, "join_count": 0})
    total_time = user_voice_data["total_time"]
    join_count = user_voice_data["join_count"]

    # Convertir le temps total en heures, minutes et secondes
    hours, remainder = divmod(total_time, 3600)
    minutes, seconds = divmod(remainder, 60)

    # Cr√©er un embed pour afficher les informations
    embed = discord.Embed(
        title=f"Informations sur {user.name}",
        color=discord.Color.blue(),
        timestamp=interaction.created_at
    )
    embed.set_thumbnail(url=user.avatar.url if user.avatar else user.default_avatar.url)

    # Ajouter les informations de base
    embed.add_field(name="Nom d'utilisateur", value=f"{user.name}#{user.discriminator}", inline=True)
    embed.add_field(name="ID", value=user.id, inline=True)
    embed.add_field(name="Bot ?", value="Oui" if user.bot else "Non", inline=True)

    # Ajouter les informations sur le compte
    embed.add_field(name="Compte cr√©√© le", value=user.created_at.strftime("%d/%m/%Y √† %H:%M:%S"), inline=True)

    # Ajouter les informations sp√©cifiques au serveur si le membre est dans le serveur
    if member:
        embed.add_field(name="A rejoint le serveur le", value=member.joined_at.strftime("%d/%m/%Y √† %H:%M:%S"), inline=True)
        roles = [role.mention for role in member.roles if role.name != "@everyone"]
        embed.add_field(name="R√¥les", value=", ".join(roles) if roles else "Aucun r√¥le", inline=False)
        embed.add_field(name="Statut", value=str(member.status).capitalize(), inline=True)
        embed.add_field(name="Activit√©", value=member.activity.name if member.activity else "Aucune", inline=True)

    # Ajouter les informations sur les sanctions
    embed.add_field(name="Sanctions", value=(
        f"üö´ **Bannissements** : {ban_count}\n"
        f"üîá **Mutes** : {mute_count}\n"
        f"‚ö†Ô∏è **Avertissements** : {warn_count}"
    ), inline=False)

    # Ajouter les informations sur le suivi des vocaux
    embed.add_field(name="Activit√© vocale", value=(
        f"‚è≥ **Temps total pass√© en vocal** : {hours}h {minutes}m {seconds}s\n"
        f"üîÑ **Nombre de connexions en vocal** : {join_count}"
    ), inline=False)

    # Ajouter un footer
    embed.set_footer(text=f"Demand√© par {interaction.user.name}", icon_url=interaction.user.avatar.url if interaction.user.avatar else interaction.user.default_avatar.url)

    # Envoyer l'embed
    await interaction.response.send_message(embed=embed)
#FIN}

#{DEBUT : CMD Sanctionner un utilisateur
@bot.tree.command(name="sanction", description="Sanctionner un utilisateur (bannir, mute, avertir).")
async def sanction(interaction: discord.Interaction, user: discord.Member, action: str, reason: str = "Aucune raison sp√©cifi√©e"):
    """
    Commande pour sanctionner un utilisateur.
    :param interaction: L'interaction Discord.
    :param user: L'utilisateur √† sanctionner.
    :param action: L'action √† effectuer (ban, mute, warn).
    :param reason: La raison de la sanction.
    """
    # V√©rifie si l'utilisateur qui ex√©cute la commande est administrateur
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("Vous n'avez pas la permission d'utiliser cette commande.", ephemeral=True)
        return

    # Envoie une r√©ponse diff√©r√©e pour √©viter l'expiration de l'interaction
    await interaction.response.defer(ephemeral=True)

    # V√©rifie l'action demand√©e
    action = action.lower()
    if action not in ["ban", "mute", "warn"]:
        await interaction.followup.send("Action invalide. Utilisez `ban`, `mute` ou `warn`.", ephemeral=True)
        return

    # Charger les donn√©es de sanctions
    with open(sanctions_file, "r") as f:
        sanctions = json.load(f)

    user_id = str(user.id)  # ID de l'utilisateur sous forme de cha√Æne

    # Initialiser les sanctions pour l'utilisateur s'il n'existe pas encore
    if user_id not in sanctions:
        sanctions[user_id] = {"ban": 0, "mute": 0, "warn": 0}

    # Pr√©parer le message de notification pour le membre
    try:
        if action == "ban":
            await user.send(f"üö´ Vous avez √©t√© **banni** du serveur **{interaction.guild.name}** pour la raison : {reason}.")
            await user.ban(reason=reason)
            sanctions[user_id]["ban"] += 1  # Incr√©menter le compteur de bannissements
            await interaction.followup.send(f"üö´ {user.mention} a √©t√© **banni** pour la raison : {reason}.", ephemeral=True)

        elif action == "mute":
            mute_role = discord.utils.get(interaction.guild.roles, name="Muted")
            if not mute_role:
                # Cr√©e le r√¥le "Muted" s'il n'existe pas
                mute_role = await interaction.guild.create_role(name="Muted", permissions=discord.Permissions(send_messages=False, speak=False))
                for channel in interaction.guild.channels:
                    await channel.set_permissions(mute_role, send_messages=False, speak=False)
            await user.add_roles(mute_role, reason=reason)
            await user.send(f"üîá Vous avez √©t√© **mut√©** sur le serveur **{interaction.guild.name}** pour la raison : {reason}.")
            sanctions[user_id]["mute"] += 1  # Incr√©menter le compteur de mutes
            await interaction.followup.send(f"üîá {user.mention} a √©t√© **mut√©** pour la raison : {reason}.", ephemeral=True)

        elif action == "warn":
            await user.send(f"‚ö†Ô∏è Vous avez re√ßu un **avertissement** sur le serveur **{interaction.guild.name}** pour la raison : {reason}.")
            sanctions[user_id]["warn"] += 1  # Incr√©menter le compteur d'avertissements
            await interaction.followup.send(f"‚ö†Ô∏è {user.mention} a re√ßu un **avertissement** pour la raison : {reason}.", ephemeral=True)

    except discord.Forbidden:
        await interaction.followup.send(f"‚ùå Impossible d'envoyer un message priv√© √† {user.mention}.", ephemeral=True)

    # Sauvegarder les donn√©es de sanctions
    with open(sanctions_file, "w") as f:
        json.dump(sanctions, f, indent=4)
#FIN}

#{DEBUT : CMD Lever une sanction d'un utilisateur.
@bot.tree.command(name="unsanction", description="Lever une sanction sur un utilisateur (d√©bannir ou retirer le mute).")
async def unsanction(interaction: discord.Interaction, user: discord.Member, action: str):
    """
    :param interaction: L'interaction Discord.
    :param user: L'utilisateur √† lib√©rer de la sanction.
    :param action: L'action √† effectuer (unban, unmute).
    """
    # V√©rifie si l'utilisateur qui ex√©cute la commande est administrateur
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("Vous n'avez pas la permission d'utiliser cette commande.", ephemeral=True)
        return

    # V√©rifie l'action demand√©e
    action = action.lower()
    if action not in ["unban", "unmute"]:
        await interaction.response.send_message("Action invalide. Utilisez `unban` ou `unmute`.", ephemeral=True)
        return

    # Effectuer l'action
    if action == "unban":
        bans = await interaction.guild.bans()
        for ban_entry in bans:
            if ban_entry.user.id == user.id:
                await interaction.guild.unban(user)
                await interaction.response.send_message(f"‚úÖ {user.mention} a √©t√© **d√©banni**.", ephemeral=True)
                return
        await interaction.response.send_message(f"‚ùå {user.mention} n'est pas banni.", ephemeral=True)

    elif action == "unmute":
        # V√©rifie si le r√¥le "Muted" existe
        mute_role = discord.utils.get(interaction.guild.roles, name="Muted")
        if not mute_role:
            await interaction.response.send_message("Le r√¥le `Muted` n'existe pas dans ce serveur.", ephemeral=True)
            return

        # V√©rifie si l'utilisateur a le r√¥le "Muted"
        if mute_role in user.roles:
            await user.remove_roles(mute_role)
            try:
                # Envoie un message priv√© √† l'utilisateur
                await user.send(f"‚úÖ Vous n'√™tes plus **mut√©** sur le serveur **{interaction.guild.name}**.")
            except discord.Forbidden:
                await interaction.followup.send(f"‚ùå Impossible d'envoyer un message priv√© √† {user.mention}.", ephemeral=True)
            await interaction.response.send_message(f"‚úÖ {user.mention} n'est plus **mut√©**.", ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå {user.mention} n'est pas mut√©.", ephemeral=True)
#FIN}

#{DEBUT : CMD Commandes personnalis√©es
@bot.tree.command(name="custom", description="G√©rer les commandes personnalis√©es.")
async def custom(interaction: discord.Interaction, action: str, command_name: str = None, message: str = None):
    """
    :param interaction: L'interaction Discord.
    :param action: L'action √† effectuer (add, remove, list).
    :param command_name: Le nom de la commande personnalis√©e.
    :param message: Le message associ√© √† la commande (pour l'action 'add').
    """
    # V√©rifie si l'utilisateur est administrateur
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("Vous n'avez pas la permission d'utiliser cette commande.", ephemeral=True)
        return

    # Charger les commandes personnalis√©es
    with open(custom_commands_file, "r") as f:
        custom_commands = json.load(f)

    action = action.lower()

    if action == "add":
        if not command_name or not message:
            await interaction.response.send_message("Veuillez fournir un nom de commande et un message.", ephemeral=True)
            return
        custom_commands[command_name] = message
        with open(custom_commands_file, "w") as f:
            json.dump(custom_commands, f, indent=4)
        await interaction.response.send_message(f"‚úÖ La commande personnalis√©e `{command_name}` a √©t√© ajout√©e avec le message : `{message}`.", ephemeral=True)

    elif action == "remove":
        if not command_name:
            await interaction.response.send_message("Veuillez fournir le nom de la commande √† supprimer.", ephemeral=True)
            return
        if command_name in custom_commands:
            del custom_commands[command_name]
            with open(custom_commands_file, "w") as f:
                json.dump(custom_commands, f, indent=4)
            await interaction.response.send_message(f"‚ùå La commande personnalis√©e `{command_name}` a √©t√© supprim√©e.", ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå La commande `{command_name}` n'existe pas.", ephemeral=True)

    elif action == "list":
        if not custom_commands:
            await interaction.response.send_message("Aucune commande personnalis√©e n'a √©t√© d√©finie.", ephemeral=True)
        else:
            commands_list = "\n".join([f"- `{cmd}` : {msg}" for cmd, msg in custom_commands.items()])
            await interaction.response.send_message(f"üìú Liste des commandes personnalis√©es :\n{commands_list}", ephemeral=True)

    else:
        await interaction.response.send_message("Action invalide. Utilisez `add`, `remove` ou `list`.", ephemeral=True)
#FIN}


#{DEBUT : CMD Anniversaire define
from discord.ui import View, Button, Modal, TextInput

class BirthdayModal(Modal):
    def __init__(self, user_id):
        super().__init__(title="Enregistrer votre anniversaire")
        self.user_id = user_id

        # Champ pour saisir la date d'anniversaire
        self.birthday_input = TextInput(
            label="Date d'anniversaire (JJ/MM)",
            placeholder="Exemple : 25/12",
            required=True
        )
        self.add_item(self.birthday_input)

    async def on_submit(self, interaction: discord.Interaction):
        # Charger les donn√©es des anniversaires
        with open(birthdays_file, "r") as f:
            birthdays = json.load(f)

        # Enregistrer la date d'anniversaire
        birthdays[str(self.user_id)] = self.birthday_input.value

        # Sauvegarder les donn√©es
        with open(birthdays_file, "w") as f:
            json.dump(birthdays, f, indent=4)

        await interaction.response.send_message(
            f"üéâ Votre date d'anniversaire a √©t√© enregistr√©e : **{self.birthday_input.value}** !",
            ephemeral=True
        )

class BirthdayPanelView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="Ajouter/Modifier ma date", style=discord.ButtonStyle.green, emoji="üéÇ")
    async def add_birthday(self, interaction: discord.Interaction, button: Button):
        modal = BirthdayModal(user_id=interaction.user.id)
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="Supprimer ma date", style=discord.ButtonStyle.red, emoji="üóëÔ∏è")
    async def remove_birthday(self, interaction: discord.Interaction, button: Button):
        # Charger les donn√©es des anniversaires
        with open(birthdays_file, "r") as f:
            birthdays = json.load(f)

        # Supprimer la date d'anniversaire si elle existe
        if str(interaction.user.id) in birthdays:
            del birthdays[str(interaction.user.id)]
            with open(birthdays_file, "w") as f:
                json.dump(birthdays, f, indent=4)
            await interaction.response.send_message("üóëÔ∏è Votre date d'anniversaire a √©t√© supprim√©e.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå Vous n'avez pas encore enregistr√© de date d'anniversaire.", ephemeral=True)

    @discord.ui.button(label="Voir la liste", style=discord.ButtonStyle.blurple, emoji="üìú")
    async def view_birthdays(self, interaction: discord.Interaction, button: Button):
        # Charger les donn√©es des anniversaires
        with open(birthdays_file, "r") as f:
            birthdays = json.load(f)

        if not birthdays:
            await interaction.response.send_message("üìú Aucune date d'anniversaire n'a √©t√© enregistr√©e.", ephemeral=True)
            return

        # Construire la liste des anniversaires
        birthday_list = "\n".join(
            [f"<@{user_id}> : **{date}**" for user_id, date in birthdays.items()]
        )
        await interaction.response.send_message(f"üìú **Liste des anniversaires enregistr√©s :**\n{birthday_list}", ephemeral=True)

@bot.tree.command(name="anniv", description="G√©rer les anniversaires des membres.")
async def anniv(interaction: discord.Interaction):
    """
    Commande pour afficher le panneau de gestion des anniversaires.
    """
    view = BirthdayPanelView()
    await interaction.response.send_message(
        "üéÇ **Panneau de gestion des anniversaires**\n- Ajoutez ou modifiez votre date d'anniversaire.\n- Supprimez votre date.\n- Consultez la liste des anniversaires enregistr√©s.",
        view=view,
        ephemeral=True
    )
#FIN}

#{DEBUT : CMD Wivia
@bot.tree.command(name="wyvia", description="Commandes de sanction de la princesse Wyvia.")
async def wyvia(interaction: discord.Interaction, user: discord.Member, action: str):
    """
    :param user: Le sujet concern√©.
    :param action: L'action √† effectuer (emprisonner, liberer).
    """ 
    try:
        await interaction.response.defer(ephemeral=True)
        # V√©rifie si l'utilisateur qui ex√©cute la commande est la princesse Wyvia
        if interaction.user.id != 1024341153216204830:  # ID de la princesse Wyvia
            # Si l'utilisateur n'est pas la princesse Wyvia, envoie un message d'erreur
            await interaction.followup.send("<:hien:1243293271783112745> Hum tu essayes d'usurper l'identit√© de la princesse Wyvia ...\nTu iras en prison toi!", ephemeral=True)
            return
    
        # V√©rifie l'action demand√©e
        action = action.lower()
        if action not in ["emprisonner", "liberer"]:
            await interaction.followup.send("<a:popcat:1307808741353066497> Princesse, vous pouvez `emprisonner` ou `liberer`.\n-# L'orthographe doit-√™tre correcte telle que precis√©e.", ephemeral=True)
            return

        # Effectuer l'action
        if action == "emprisonner":
            prison = discord.utils.get(interaction.guild.roles, name="En Prison")
            if not prison:
                    # Cr√©e le r√¥le "En Prison" s'il n'existe pas
                    prison = await interaction.guild.create_role(name="En Prison", permissions=discord.Permissions(send_messages=False, speak=False))
                    for channel in interaction.guild.channels:
                        await channel.set_permissions(prison, send_messages=False, speak=False)
            await user.add_roles(prison)
            try:
                await user.send(f" Vous avez √©t√© mis **en Prison** sur le serveur **{interaction.guild.name}**.")
                await interaction.followup.send(f" {user.mention} est d√©sormais en prison ! Il ne pourra pas gagner des xp, tant qu'il ne sera pas libre.", ephemeral=True)
            except discord.Forbidden:
                await interaction.followup.send(f" {user.mention} est d√©sormais en prison ! Mais impossible de l'envoyer un message priv√©.", ephemeral=True)

        elif action == "liberer":
            # V√©rifie si le r√¥le "En Prison" existe
            prison = discord.utils.get(interaction.guild.roles, name="En Prison")
            
            if not prison:
                await interaction.followup.send("Le r√¥le `En Prison` n'existe pas dans ce serveur.", ephemeral=True)
                return

            # V√©rifie si l'utilisateur a le r√¥le "En Prison"
            if prison in user.roles:
                await user.remove_roles(prison)
                try:
                    # Envoie un message priv√© √† l'utilisateur
                    await user.send(f"‚úÖ Vous n'√™tes plus **En Prison** sur le serveur **{interaction.guild.name}**.")
                    await interaction.followup.send(f"‚úÖ {user.mention} n'est plus **En Prison**.", ephemeral=True)
                    return
                except Exception as e:
                    # Si l'envoi du message √©choue, envoie un message d'erreur
                    print(f"Erreur lors de l'envoi du message priv√© √† {user.name}: {e}")
                    await interaction.followup.send(f"‚úÖ {user.mention} n'est plus **En Prison** mais, Impossible d'envoyer un message priv√© √† {user.mention}.", ephemeral=True)
                    return
            else:
                await interaction.followup.send(f"‚ùå {user.mention} n'est pas En Prison.", ephemeral=True)
                return

    except Exception as e:
        print(f"Erreur dans la commande wyvia : {e}")
#FIN}

#{DEBUT: CMD d'aide !
@bot.tree.command(name="help", description="Afficher toutes les fonctionnalit√©s du bot.")
async def help_command(interaction: discord.Interaction):
    """
    Commande pour afficher toutes les fonctionnalit√©s du bot dans un joli embed.
    """
    # Cr√©er un embed
    embed = discord.Embed(
        title="üìö Liste des fonctionnalit√©s du bot",
        description="D√©couvrez toutes les fonctionnalit√©s incroyables que ce bot peut offrir !",
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=bot.user.avatar.url if bot.user.avatar else bot.user.default_avatar.url)

    # Ajouter les fonctionnalit√©s
    embed.add_field(
        name="üîí **Verrouillage**",
        value="`/lock` : Verrouillez un salon ou un fil pour emp√™cher les utilisateurs d'envoyer des messages.",
        inline=False
    )
    embed.add_field(
        name="üßπ **Nettoyage**",
        value="`/clear` : Supprimez rapidement un ou plusieurs messages dans un salon pour garder les discussions propres.",
        inline=False
    )
    embed.add_field(
        name="üìä **Niveau**",
        value="`/level` : Consultez votre niveau ou celui d'un autre utilisateur pour voir votre progression.",
        inline=False
    )
    embed.add_field(
        name="üéâ **Ajouter des XP**",
        value="`/add_xp` : R√©compensez un utilisateur en lui ajoutant des points d'exp√©rience.",
        inline=False
    )
    embed.add_field(
        name="üìâ **Retirer des XP**",
        value="`/remove_xp` : Retirez des points d'exp√©rience √† un utilisateur en cas de besoin.",
        inline=False
    )
    embed.add_field(
        name="üì® **Envoyer un message**",
        value="`/send_message` : Envoyez un message dans un salon sp√©cifique pour partager des informations importantes.",
        inline=False
    )
    embed.add_field(
        name="üë§ **Info utilisateur**",
        value="`/user_info` : Obtenez des informations d√©taill√©es sur un utilisateur, y compris ses r√¥les et son activit√©.",
        inline=False
    )
    embed.add_field(
        name="‚ö†Ô∏è **Sanction**",
        value="`/sanction` : Sanctionnez un utilisateur en le bannissant, en le mutant ou en lui donnant un avertissement.",
        inline=False
    )
    embed.add_field(
        name="‚úÖ **Lever une sanction**",
        value="`/unsanction` : Annulez une sanction appliqu√©e √† un utilisateur, comme un bannissement ou un mute.",
        inline=False
    )
    embed.add_field(
        name="‚öôÔ∏è **Commandes personnalis√©es**",
        value="`/custom_command` : Cr√©ez, modifiez ou supprimez des commandes personnalis√©es pour enrichir votre serveur.",
        inline=False
    )
    embed.add_field(
        name="üìù **Confessions anonymes**",
        value="Permettez aux utilisateurs de partager des confessions anonymes dans un salon d√©di√© avec `$$.confess`.",
        inline=False
    )
    embed.add_field(
        name="üéôÔ∏è **Suivi vocal**",
        value="Suivez le temps pass√© en vocal par les membres et attribuez des XP en fonction de leur activit√©.",
        inline=False
    )
    embed.add_field(
        name="üéâ **Bienvenue**",
        value="Souhaitez la bienvenue aux nouveaux membres avec un message interactif et des r√©compenses en XP.",
        inline=False
    )
    embed.add_field(
        name="üìú **Cr√©ation automatique de fils**",
        value="Cr√©ez automatiquement des fils de discussion pour organiser les conversations dans certains salons.",
        inline=False
    )
    embed.add_field(
        name="üîî **Rappel de bump**",
        value="Recevez des rappels automatiques pour bumper le serveur et attribuez des XP aux membres qui le font.",
        inline=False
    )
    embed.add_field(
        name="üéÇ **Anniversaires**",
        value="Permettez aux membres d'enregistrer leur date d'anniversaire et recevez un message le jour J avec `/anniv`.",
        inline=False
    )
    embed.add_field(
        name="üì¢ **Annonces Twitch**",
        value="Recevez des notifications automatiques lorsqu'une cha√Æne Twitch configur√©e commence un stream.",
        inline=False
    )
    embed.add_field(
        name="‚öôÔ∏è **Configuration**",
        value="G√©rez les param√®tres du bot via un panneau interactif avec `/config`.",
        inline=False
    )

    # Ajouter un footer
    embed.set_footer(
        text=f"Demand√© par {interaction.user.name}",
        icon_url=interaction.user.avatar.url if interaction.user.avatar else interaction.user.default_avatar.url
    )

    # Envoyer l'embed
    await interaction.response.send_message(embed=embed)
#FIN}

#{DEBUT: Config du bot !
class ConfigSelectorView(View):
    def __init__(self):
        super().__init__(timeout=None)

        # Ajouter un menu d√©roulant (select menu)
        self.add_item(ConfigSelector())

class ConfigSelector(Select):
    def __init__(self):
        # D√©finir les options du s√©lecteur
        options = [
            discord.SelectOption(label="Salon de bienvenue", description="Modifier le salon de bienvenue", emoji="üîî"),
            discord.SelectOption(label="Salon de log", description="Modifier le salon de log", emoji="üìú"),
            discord.SelectOption(label="Salon de niveau up", description="Modifier le salon de niveau up", emoji="üéâ"),
            discord.SelectOption(label="Salon de confession", description="Modifier le salon de confession", emoji="üìù"),
            discord.SelectOption(label="Salon de bump", description="Modifier le salon de bump", emoji="üîî"),
            discord.SelectOption(label="Salon d'annonces de stream", description="Modifier le salon d'annonces de stream", emoji="üì¢"),
            discord.SelectOption(label="Salon d'anniversaires", description="Modifier le salon d'anniversaires", emoji="üéÇ"),
            discord.SelectOption(label="Cha√Ænes Twitch surveill√©es", description="Modifier les cha√Ænes Twitch surveill√©es", emoji="üéÆ"),
            discord.SelectOption(label="Bots de bump", description="Modifier les bots de bump", emoji="ü§ñ"),
            discord.SelectOption(label="Messages de bump", description="Modifier les messages de bump", emoji="üìú"),
        ]

        # Initialiser le s√©lecteur
        super().__init__(
            placeholder="S√©lectionnez une configuration √† modifier...",
            min_values=1,
            max_values=1,
            options=options
        )

    async def callback(self, interaction: discord.Interaction):
        # R√©cup√©rer l'option s√©lectionn√©e
        selected_option = self.values[0]

        # G√©rer chaque option
        if selected_option == "Salon de bienvenue":
            await interaction.response.send_message("Veuillez mentionner le nouveau salon de bienvenue.", ephemeral=True)
        elif selected_option == "Salon de log":
            await interaction.response.send_message("Veuillez mentionner le nouveau salon de log.", ephemeral=True)
        elif selected_option == "Salon de niveau up":
            await interaction.response.send_message("Veuillez mentionner le nouveau salon de niveau up.", ephemeral=True)
        elif selected_option == "Salon de confession":
            await interaction.response.send_message("Veuillez mentionner le nouveau salon de confession.", ephemeral=True)
        elif selected_option == "Salon de bump":
            await interaction.response.send_message("Veuillez mentionner le nouveau salon de bump.", ephemeral=True)
        elif selected_option == "Salon d'annonces de stream":
            await interaction.response.send_message("Veuillez mentionner le nouveau salon d'annonces de stream.", ephemeral=True)
        elif selected_option == "Salon d'anniversaires":
            await interaction.response.send_message("Veuillez mentionner le nouveau salon d'anniversaires.", ephemeral=True)
        elif selected_option == "Cha√Ænes Twitch surveill√©es":
            await interaction.response.send_message("Veuillez entrer les nouvelles cha√Ænes Twitch (s√©par√©es par des virgules).", ephemeral=True)
        elif selected_option == "Bots de bump":
            await interaction.response.send_message("Veuillez entrer les nouveaux bots de bump (s√©par√©es par des virgules).", ephemeral=True)
        elif selected_option == "Messages de bump":
            await interaction.response.send_message("Veuillez entrer les nouveaux messages de bump (s√©par√©es par des virgules).", ephemeral=True)

@bot.tree.command(name="pannel", description="G√©rer la configuration actuelle du bot.")
async def pannel(interaction: discord.Interaction):
    """
    Commande pour afficher le panneau de gestion des configurations.
    """
    # V√©rifie si l'utilisateur est administrateur
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå Vous n'avez pas la permission d'utiliser cette commande.", ephemeral=True)
        return

    # Cr√©er une vue avec le s√©lecteur
    view = ConfigSelectorView()

    # Envoyer le message avec le s√©lecteur
    await interaction.response.send_message(
        "‚öôÔ∏è **Panneau de gestion des configurations**\nS√©lectionnez une option dans le menu d√©roulant pour modifier une configuration.",
        view=view,
        ephemeral=True
    )
#FIN}

#{DEBUT : CMD Restart
@bot.tree.command(name="restart", description="Red√©marrer le bot.")
async def restart(interaction: discord.Interaction):
    """
    Commande pour red√©marrer le bot.
    """
    # V√©rifie si l'utilisateur qui ex√©cute la commande est administrateur
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("Vous n'avez pas la permission d'utiliser cette commande.", ephemeral=True)
        return
    try:
        await interaction.response.send_message("üîÑ landhaven va red√©marrer...", ephemeral=True)
        await bot.close()
        os.execv(sys.executable, ['python'] + sys.argv) # Relance le bot
    except Exception as e:
        await interaction.followup.send(f"‚ùå Une erreur s'est produite lors du red√©marrage : {e}", ephemeral=True)
        print(f"Erreur lors du red√©marrage : {e}")
        return
#FIN}

#{DEBUT : Lancement de l'application
bot.run(config.token)
#FIN}